import task1.BerylliumSphere;
import task1.Methods;
import task2.ReturnArrayOfBS;
import task3.TwoDimensionalArray;
import task4.ThreeDimensionalArray;
import task5.NonPrimitiveArray;
import task6.TwoDimensionalArrayBS;
import task7.ThreeDimensionalArrayBS;

import java.util.Arrays;

public class Main {
    public static void main(String[] args) {


        /*
        Exercise 1: (2) Create a method that takes an array of BerylliumSphere as an
        argument. Call the method, creating the argument dynamically. Demonstrate that ordinary
        aggregate array initialization doesnâ€™t work in this case. Discover the only situations where
        ordinary aggregate array initialization works, and where dynamic aggregate initialization is
        redundant.
         */

        Methods.method1(new BerylliumSphere[3]);
        Methods.method1(new BerylliumSphere[] {new BerylliumSphere(), new BerylliumSphere(), new BerylliumSphere()});

        System.out.println();


        /*
        Exercise 2: (1) Write a method that takes an int argument and returns an array of that
        size, filled with BerylliumSphere objects
         */

        System.out.println(Arrays.toString(ReturnArrayOfBS.getArray(5)));

        System.out.println();


        /*
        Exercise 3: (4) Write a method that creates and initializes a twodimensional array of
        double. The size of the array is determined by the arguments of the method, and the
        initialization values are a range determined by beginning and ending values that are also
        arguments of the method. Create a second method that will print the array generated by the
        first method. In main( ) test the methods by creating and printing several different sizes of
        arrays.
         */

        TwoDimensionalArray.printTwoDimensionalArray(TwoDimensionalArray.getDoubleTwoDimensionalArray(3,3,1,5));

        System.out.println();

        /*
        Exercise 4: (2) Repeat the previous exercise for a three-dimensional array.
         */


        ThreeDimensionalArray.printThreeDimensionalArray(ThreeDimensionalArray.getDoubleTwoDimensionalArray(3,3,3,1,5));

        System.out.println();



        /*
        Exercise 5: (1) Demonstrate that multidimensional arrays of nonprimitive types are
        automatically initialized to null.
         */

        System.out.println(Arrays.toString(new NonPrimitiveArray().getArray()));

        System.out.println();

        /*
        Exercise 6: (1) Write a method that takes two int arguments, indicating the two sizes of
        a 2-D array. The method should create and fill a 2-D array of BerylliumSphere according
        to the size arguments.
         */

        TwoDimensionalArray.printTwoDimensionalArray(TwoDimensionalArrayBS.getTwoDimensionalArrayBS(3,3));

        System.out.println();

        /*
        Exercise 7: (1) Repeat the previous exercise for a 3-D array.
         */

        ThreeDimensionalArray.printThreeDimensionalArray(ThreeDimensionalArrayBS.getDoubleTwoDimensionalArray(3,3,3));

        System.out.println();

        /*

         */





    }
}
